//
//  MetaMetadataNestedField.cs
//  s.im.pl serialization
//
//  Generated by DotNetTranslator on 11/16/10.
//  Copyright 2010 Interface Ecology Lab. 
//

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using Ecologylab.BigSemantics.MetadataNS;
using Simpl.Fundamental.Collections;
using Simpl.Fundamental.Generic;
using Simpl.Serialization;
using Simpl.Serialization.Attributes;
using Simpl.Serialization.Context;


namespace Ecologylab.BigSemantics.MetaMetadataNS 
{
    [SimplInherit]
    public abstract class MetaMetadataNestedField : MetaMetadataField
    {
        private const string AsemblyQualifiedNameForGeneratedSemantics = ", ecologylabGeneratedSemantics, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null";

        [SimplScalar]
        [SimplTag("package")] 
        private String packageName;

        [SimplComposite]
        [SimplTag("field_parser")]
        private FieldParserElement fieldParserElement;

        [SimplScalar]
        private Boolean promoteChildren;

        [SimplScalar]
        private String polymorphicScope;

        [SimplScalar]
        private String polymorphicClasses;

        [SimplScalar]
        private String schemaOrgItemtype;

/*      [SimplCollection("generic_type_var")]
        [SimplNoWrap]
        private List<MmdGenericTypeVar> genericTypeVars;
*/
        [SimplScalar]
        private bool showExpandedInitially;

        /**
         * the mmd used by this nested field. corresponding attributes: (child_)type/extends. could be a
         * generated one for inline definitions.
         */
        [SimplComposite]
        [MmDontInherit]
        private MetaMetadata typeMmd;

        /**
         * should we generate a metadata class descriptor for this field. used by the compiler.
         */
        [SimplScalar]
        [MmDontInherit]
        private bool newMetadataClass;

        [SimplComposite]
        [MmDontInherit]
        private MmdScope scope;

        [SimplScalar]
        private String otherTags;

        private bool    mmdScopeTraversed;
        
        private bool    _inheritInProcess;

        /*
         * Delegate called when inheritance is finished. Used when we have cycles, and must wait for until inheritance is finished.
         * e.g. References in ScholaryArticle.
         */
        public delegate void InheritFinishedEventHandler(MetaMetadataNestedField sender, EventArgs e);

        public event InheritFinishedEventHandler InheritFinished;

        protected Stack<MetaMetadataNestedField> _waitingToInheritFrom;

        protected Stack<InheritanceHandler> _waitingToInheritFromInheritanceHandler;

        private String _cachedMetadataClassName;

        protected MetaMetadataNestedField()
        {
        }

        protected abstract String GetMetaMetadataTagToInheritFrom();

        public void InheritMetaMetadata(InheritanceHandler inheritanceHandler)
        {
            if (inheritDone || _inheritInProcess) return;

            //Debug.WriteLine("inheriting " + this);
            _inheritInProcess = true;
            if (InheritMetaMetadataHelper(inheritanceHandler))
                FinishInheritance();
        }

        protected void FinishInheritance()
        {
            this.SortForDisplay();

            _inheritInProcess = false;
            inheritDone = true;

            if (InheritFinished != null)
                InheritFinished(this, EventArgs.Empty);
        }

        public void AddInheritanceFinishHandler(MetaMetadataNestedField inheritingField, InheritFinishedEventHandler eventHandler, InheritanceHandler inheritanceHandler)
        {
            if (_waitingToInheritFrom == null)
                _waitingToInheritFrom = new Stack<MetaMetadataNestedField>();

            _waitingToInheritFrom.Push(inheritingField);

            //adding the InheritanceHandler for this inheritingField
            if (_waitingToInheritFromInheritanceHandler == null)
                _waitingToInheritFromInheritanceHandler = new Stack<InheritanceHandler>();

            _waitingToInheritFromInheritanceHandler.Push(inheritanceHandler);

            inheritingField.InheritFinished += eventHandler;
        }

        protected abstract bool InheritMetaMetadataHelper(InheritanceHandler inheritanceHandler);

        private static String csharpNSMetadata = "Ecologylab.Semantics.Metadata";
        private static String csharpNSMetadataNS = "Ecologylab.Semantics.MetadataNS";
        private static String csharpNSMetaMetadata = "Ecologylab.Semantics.Metametadata";
        private static String csharpNSMetaMetadataNS = "Ecologylab.Semantics.MetaMetadataNS";
        private static String csharpNSLibraryDot = "Ecologylab.Semantics.Generated.Library.";

        private String _csharpPackageName;

        public String CSharpPackageName
        {
            get
            {
                String result = _csharpPackageName;
                if (result == null)
                {
                    //TODO implement StringBuilderUtils
                    var sb = new StringBuilder(); //StringBuilderUtils.aquire();
                    for (int i = 0; i < packageName.Length; ++i)
                    {
                        char c = packageName[i];
                        char pc = i == 0 ? (char) 0 : packageName[i - 1];
                        if (c != '_')
                            sb.Append((i == 0 || pc == '.' || pc == '_') ? Char.ToUpper(c) : c);
                    }
                    sb.Append("NS");
                    result = sb.ToString();
                    if (result.Contains("Bigsemantics"))
                    {
                        result = result.Replace("Bigsemantics", "BigSemantics");
                    }
                    //StringBuilderUtils.release(sb);
                    sb.Clear();
                }

                if (result.StartsWith(csharpNSMetadata)
                    && !result.StartsWith(csharpNSMetadataNS))
                {
                    result = result.Replace(csharpNSMetadata, csharpNSMetadataNS);
                }
                else if (result.StartsWith(csharpNSMetaMetadata)
                    && !result.StartsWith(csharpNSMetaMetadataNS))
                {
                    result = result.Replace(csharpNSMetaMetadata, csharpNSMetaMetadataNS);
                }
                else if (result.StartsWith(csharpNSLibraryDot))
                {
                    if (!result.EndsWith("NS"))
                        result += "NS";
                }

                return result;
            }
        }

        public String PackageName
        {
            get { return packageName; }
            set { packageName = value; }
        }

        public FieldParserElement FieldParserElement
        {
            get { return fieldParserElement; }
            set { fieldParserElement = value; }
        }

        public Boolean PromoteChildren
        {
            get { return promoteChildren; }
            set { promoteChildren = value; }
        }

        public bool ShowExpandedInitially
        {
            get { return showExpandedInitially; }
            set { showExpandedInitially = value; }
        }

        public String PolymorphicScope
        {
            get { return polymorphicScope; }
            set { polymorphicScope = value; }
        }

        public String PolymorphicClasses
        {
            get { return polymorphicClasses; }
            set { polymorphicClasses = value; }
        }

        public String SchemaOrgItemtype
        {
            get { return schemaOrgItemtype; }
            set { schemaOrgItemtype = value; }
        }

        public MmdScope Scope
        {
            get { return scope; }
            set { scope = value; }
        }

        public MetaMetadata TypeMmd
        {
            get { return typeMmd; }
            set { typeMmd = value; }
        }

        public virtual bool IsNewMetadataClass()
        {
            return newMetadataClass;
        }

        public void SetNewMetadataClass(bool b)
        {
            newMetadataClass = b;
        }

        public bool MmdScopeTraversed
        {
            get { return mmdScopeTraversed; }
            set { mmdScopeTraversed = value; }
        }

        private void InheritNonFieldComponentsFromMM(MetaMetadata inheritedMetaMetadata)
        {
            //Console.WriteLine("InheritNonFieldComponentsFromMM, doing nothing");
        }

        public abstract MetaMetadataCompositeField GetMetaMetadataCompositeField();

        public override String GetTypeName()
        {
            String result = null;
            Type thisType = GetType();
            if (thisType == typeof (MetaMetadataCompositeField))
            {
                MetaMetadataCompositeField mmcf = (MetaMetadataCompositeField) this;
                if (mmcf.Type != null)
                    result = mmcf.Type;
            }
            else if (thisType == typeof (MetaMetadataCollectionField))
            {
                MetaMetadataCollectionField mmcf = (MetaMetadataCollectionField) this;
                if (mmcf.ChildType != null)
                    result = mmcf.ChildType;
                else if (mmcf.ChildScalarType != null)
                    result = mmcf.ChildScalarType.CSharpTypeName;
            }

            if (result == null)
            {
                MetaMetadataField inherited = SuperField;
                if (inherited != null)
                {
                    // use inherited field's type
                    result = inherited.GetTypeName();
                }
            }

            return result ?? (Name);
        }

        protected internal virtual MetadataClassDescriptor BindMetadataClassDescriptor(SimplTypesScope metadataTScope)
        {
            MetadataClassDescriptor metadataCd = this.MetadataClassDescriptor;
            if (metadataCd == null)
            {
                metadataCd = GetMetadataClassDescriptor(metadataTScope);
                if (metadataCd != null)
                {
                    this.MetadataClassDescriptor = metadataCd; // early assignment to prevent infinite loop
                    this.BindMetadataFieldDescriptors(metadataTScope, metadataCd);
                }
            }
            return metadataCd;
        }

        MetadataClassDescriptor GetMetadataClassDescriptor(SimplTypesScope metadataTScope)
        {
            MetadataClassDescriptor metadataCd = this.metadataClassDescriptor;
            if (metadataCd == null)
            {
                //this.InheritMetaMetadata(null); //edit

                String metadataClassSimpleName = this.GetMetadataClassSimpleName();
                // first look up by simple name, since package names for some built-ins are wrong

                metadataCd =
                    (MetadataClassDescriptor)metadataTScope.GetClassDescriptorBySimpleName(metadataClassSimpleName);
                if (metadataCd == null)
                {
                    String metadataClassName = this.GetMetadataClassName();

                    metadataCd = (MetadataClassDescriptor)metadataTScope.GetClassDescriptorByClassName(metadataClassName);
                    if (metadataCd == null)
                    {
                        try
                        {
                            Type metadataType = Type.GetType(metadataClassName) ??
                                                Type.GetType(metadataClassName +
                                                             AsemblyQualifiedNameForGeneratedSemantics);
                            this.metadataClass = metadataType;
                            if (MetadataClass != null)
                            {
                                metadataCd = (MetadataClassDescriptor)ClassDescriptor.GetClassDescriptor(MetadataClass);
                                metadataTScope.AddTranslation(MetadataClass);
                            }
                            else
                            {
                                Debug.WriteLineIf(BigSemanticsSettings.DebugLevel > 5, "Cannot find metadata class " + metadataClassName + " for " + this);
                            }

                        }
                        catch (Exception e)
                        {
                            Debug.WriteLine("Exception: " + e.Message);
                            Debug.WriteLine("Stacktrace:\n" + e.StackTrace);
                            Debug.WriteLine("Cannot find metadata class " + metadataClassName + " for " + this);
                        }
                    }
                }
            }
            return metadataCd;
        }

        /**
	 * bind metadata field descriptors to sub-fields of this nested field, with field names as keys,
	 * but without mixins field.
	 * <p>
	 * sub-fields that lack corresponding field descriptors will be removed from this nested field.
	 * <p>
	 * note that this field no longer uses a boolean flag to prevent multiple invocation. this should
	 * have been done by the bindClassDescriptor() method.
	 * 
	 * @param metadataTScope
	 *          the translation scope of (generated) metadata classes.
	 * @param metadataClassDescriptor
	 *          the metadata class descriptor where field descriptors can be found.
	 */

        protected void BindMetadataFieldDescriptors(SimplTypesScope metadataTScope,
                                                    MetadataClassDescriptor metadataClassDescriptorToBind)
        {
            bool needCloneKids = false;

            // check if the class's base class is genereic typed, and make sure itself is not generic.  
            MetadataClassDescriptor metadataCd = MetadataClassDescriptor;
            MetaMetadata baseMmd = TypeMmd;
            while(baseMmd != null && metadataCd != null)
            {
                if (metadataCd.GetGenericTypeVars().Count == 0 && baseMmd.GenericTypeVars != null)
                {
                    needCloneKids = true;
                    break;
                }
                metadataCd = baseMmd.MetadataClassDescriptor;
                baseMmd = baseMmd.TypeMmd;
            }

            if (needCloneKids)
            {
                DictionaryList<string, MetaMetadataField> clonedKids = new DictionaryList<string, MetaMetadataField>();
                foreach (KeyValuePair<string, MetaMetadataField> entry in Kids)
                {
                    string key = entry.Key;
                    MetaMetadataField field = entry.Value;
                        
                    // look up to see if the field is declared in a generic typed class. If not, it does not need to clone it.
                    MetaMetadata declaringMmd = field.DeclaringMmd;
                    if (declaringMmd != null && declaringMmd.GenericTypeVars != null && declaringMmd.IsGenericMetadata)
                    {
                        // clone the field
                        field = field.Clone();
                        // remove the inherited field descriptor
                        field.MetadataFieldDescriptor = null;
                    }
                    clonedKids.Put(key, field);
                }
                Kids = clonedKids;
            }
            

            // copy the kids collection first to prevent modification to the collection during iteration (which may invalidate the iterator).
            List<MetaMetadataField> fields = new List<MetaMetadataField>(Kids.Values);

            foreach (MetaMetadataField thatChild in fields)
            {
                // look up by field name and bind
                MetadataFieldDescriptor metadataFd = thatChild.BindMetadataFieldDescriptor(metadataTScope, metadataClassDescriptorToBind);
                if (metadataFd == null)
                {
                    Debug.WriteLineIf(BigSemanticsSettings.DebugLevel > 5, "Cannot bind metadata field descriptor for " + thatChild);
                    Kids.Remove(thatChild.Name);
                    continue;
                }

                // set defininig mmdfield

                // process hide and shadows
                var isImage = thatChild is MetaMetadataCompositeField && "image".Equals(((MetaMetadataCompositeField) thatChild).Type);
                HashSet<String> nonDisplayedFieldNames = NonDisplayedFieldNames;
                if (thatChild.Hide && !isImage)
                    nonDisplayedFieldNames.Add(thatChild.Name);
                if (thatChild.Shadows != null)
                    nonDisplayedFieldNames.Add(thatChild.Shadows);

                // recursively process sub-fields
                Int32 fieldType = metadataFd.FdType;
                if (fieldType == FieldTypes.CompositeElement || fieldType == FieldTypes.CollectionElement)
                {
                    // bind class descriptor for nested sub-fields
                    MetaMetadataNestedField nested = (MetaMetadataNestedField) thatChild;
                    MetadataFieldDescriptor fd = nested.MetadataFieldDescriptor;
                    if (fd.IsPolymorphic)
                    {
                        Debug.WriteLineIf(BigSemanticsSettings.DebugLevel > 5, "Polymorphic field: " + nested + ", not binding an element class descriptor.");
                    }
                    else
                    {
                        MetadataClassDescriptor elementClassDescriptor =
                            ((MetaMetadataNestedField) thatChild).BindMetadataClassDescriptor(metadataTScope);
                        if (elementClassDescriptor != null)
                        {
                            MetaMetadata mmdForThatChild = nested.TypeMmd;
                            if (mmdForThatChild != null && mmdForThatChild.MetadataClassDescriptor == null)
                                //							mmdForThatChild.setMetadataClassDescriptor(elementClassDescriptor);
                                mmdForThatChild.BindMetadataClassDescriptor(metadataTScope);
                        }
                        else
                        {
                            Debug.WriteLineIf(BigSemanticsSettings.DebugLevel > 5, "Cannot determine elementClassDescriptor for " + thatChild);
                            Kids.Remove(thatChild.Name);
                        }
                    }
                }

                if (this is MetaMetadata)
                {
                    MetaMetadata mmd = (MetaMetadata) this;
                    String naturalId = thatChild.AsNaturalId;
                    if (naturalId != null)
                    {
                        mmd.NaturalIds.Put(naturalId, thatChild);
                    }
                }
            }
        }

        protected override void CustomizeFieldDescriptor(SimplTypesScope metadataTScope, MetadataFieldDescriptorProxy fdProxy)
        {
            base.CustomizeFieldDescriptor(metadataTScope, fdProxy);

            MetaMetadata thisMmd = TypeMmd;
            if (thisMmd == null)
                return;

            MetaMetadataNestedField inheritedField = (MetaMetadataNestedField) SuperField;
            if (inheritedField != null)
            {
                MetaMetadata superMmd = inheritedField.TypeMmd;
                if (thisMmd == superMmd || thisMmd.IsDerivedFrom(superMmd))
                {
                    MetadataClassDescriptor elementMetadataCD = thisMmd.GetMetadataClassDescriptor(metadataTScope);
                    if (elementMetadataCD != null)
                        fdProxy.SetElementClassDescriptor(elementMetadataCD);
                    else
                    {
                        Debug.WriteLineIf(BigSemanticsSettings.DebugLevel > 5, "can't bind FieldDescriptor because metadata class does not exist for: " + thisMmd.ToString());
                    }
                }
                else
                {
                    throw new MetaMetadataException("incompatible types: " + inheritedField + " => " + this);
                }
            }

        }

        protected virtual string GetMetadataClassName()
        {
            String result = _cachedMetadataClassName;
            if (result == null)
            {
                result = (typeMmd != null) ? TypeMmd.GetMetadataClassName() : null;
                if (result != null)
                {
                    if (result.Contains("Bigsemantics"))
                    {
                        result = result.Replace("Bigsemantics", "BigSemantics");
                    }
                    _cachedMetadataClassName = result;
                } 
            }
            return result;
        }

        protected virtual string GetMetadataClassSimpleName()
        {
            if (TypeMmd != null)
            {
                return TypeMmd.GetMetadataClassSimpleName();
            }
            if (this.GetTypeName() != null)
            {
                return XmlTools.CamelCaseFromXMLElementName(this.GetTypeName(), true);
            }
            return null;
        }

        public void ClearInheritFinishedOrInProgressFlag()
        {
            inheritDone = false;
            _inheritInProcess = false;
        }

        /// <summary>
        /// to determine if this field is polymorphic inherently, that is, a field which we don't have
	    /// prior knowledge of its specific meta-metadata type when its encompassing meta-metadata is used.
	    ///  <p />
	    /// NOTE THAT this is different from {@code isPolymorphicInDescendantFields()} which determines if
    	/// this field is used for extended types in descendant fields. in that case although the field is
	    /// polymorphic, too, but we can determine the specific meta-metadata type for this field if the
        /// encompassing meta-metadata is used.
        /// </summary>
        public Boolean IsPolymorphicInherently
        {
            get
            {
                return !string.IsNullOrEmpty(polymorphicScope) || !string.IsNullOrEmpty(polymorphicClasses); 
            }
        }

        public Boolean InheritInProcess
        {
            get { return this._inheritInProcess; }
            set { this._inheritInProcess = value; }
        }

}
}
